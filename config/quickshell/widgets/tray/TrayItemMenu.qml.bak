import QtQuick
import Quickshell
import Quickshell.Services.SystemTray
import "root:"

Item { id: root
	required property QsMenuHandle trayItemMenu

	property list<QsMenuHandle> activeMenu: [trayItemMenu]
	property bool hasButton: false
	property bool hasIcon: false
	property bool hasChildren: false
	property int padding: GlobalConfig.spacing
	property string colourAccent: GlobalConfig.colour.accent
	property string colourText: GlobalConfig.colour.foreground

	width: layout.width
	height: layout.height

	QsMenuOpener { id: trayItemMenuOpener
		menu: trayItemMenu
	}

	QsMenuAnchor { id: trayItemMenuAnchor
		anchor.item: root
		menu: trayItemMenu
	}

	Row {
		visible: true

		Repeater {
			model: activeMenu

			Text { text: "Aa"; color: "white"; }
		}
	}

	Column { id: layout
		spacing: 2
		leftPadding: root.padding
		rightPadding: root.padding
		topPadding: root.padding
		bottomPadding: root.padding

		Repeater {
			model: trayItemMenuOpener.children

			Item { id: menuEntry
				required property QsMenuHandle modelData

				Component.onCompleted: {
					if (modelData.buttonType !== QsMenuButtonType.None){
						hasButton = true;
					}
					if (modelData.icon){
						hasIcon = true;
					}
					if (modelData.hasChildren){
						hasChildren = true;
					}
				}

				width: (modelData.isSeparator)? separator.width : menuEntryLayout.width
				height: (modelData.isSeparator)? separator.height : menuEntryLayout.height

				Rectangle { id: selectHighlight
					width: root.width -padding *2
					height: menuEntry.height
					color: colourAccent
					opacity: mouseArea.containsMouse? 0.5 : 0
					radius: 2

					Behavior on opacity { NumberAnimation { duration: 300; }}
				}

				Rectangle { id: separator
					visible: modelData.isSeparator
					width: root.width -padding *2
					height: 1
					color: colourText
					opacity: 0.2
				}

				TrayItemMenuEntry { id: menuEntryLayout
					visible: !modelData.isSeparator
					menuEntry: modelData
					hasButton: root.hasButton
					hasIcon: root.hasIcon
					hasChildren: root.hasChildren
				}

				MouseArea { id: mouseArea
					width: root.width -padding *2
					height: menuEntry.height
					hoverEnabled: true
					onClicked: event => {
						modelData.triggered()
						trayItemMenuAnchor.open()
						trayItemMenuAnchor.close()
						if(modelData.hasChildren) {
							activeMenu.push(modelData.menu)
						}
					}
				}
			}
		}
	}
}
